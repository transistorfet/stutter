
	* add traverse functions to the channel and user list types.
	* modify the irc types to return list types if referenced with direct names instead of returning NULL
	* add SCC_SET_FOCUS handler to win32 terminal
	* test the win32 terminal free/destroy code to make sure it all works correctly (which is not likely)
	* convert the terminal def_attrib variable to an attrib:fe type so you can set the style
	* add a WM_FOCUS handler to the win32 frontend

	* perhaps you can add a sorta WCC_SET_INVISIBLE/WCC_SET_VISIBLE and have them set bitflags so that
	  it is easy to know if a widget is visible or not (and then you can do scrollbar things as well)
	* should all widgets inherit from a widget superclass?
	* how will you initialize the target widget of input and how will you change/set the target widget?

	* make a command to replace parse that has as its env a command (sortof like the alias command)
	  (how will you free the env string?)  and if you evaluate, it finds the widget with focus, reads
	  the string from that widget, combines it with the env command portion and evaluates that.

	* finish implementing the win32 menu system
	* make a config system things for adding layout types (a way to register widget types) (init.h macros?)
	* make a header in frontend/common that has static inline functions for all the API function that
	  fe.c can use thus allowing you to maintain a single common implementation for all frontends that
	  use the common fe system

	* would it be totally bad to accept the parameters to emit as a va_list and store them in an array
	  of pointers that is passed to the handlers along with the size of the array?  Would this make
	  things to specific to a particular signal that is handled?  Is that a bad thing?

	* consider converting code to use constants and enums for some of the things that aren't configs
	* consider converting bitflags to bitfield structs unioned with the bitflags (so that it's still
	  easy to copy them).
	* you can have a command "fe.dialogue <diag-name> <params>" in the win32 frontend that pops up a
	  dialogue by the given name (stored in a list probably by a dialogue.c manager in the core)

	* how is the win32 config defs going to work?
	* make dispatch into a whole bunch of joinpoints? (what dispatch am i talking about?)  Oh i think
	  this is related to the evaluating of commands based on signals (make irc dispatch into joinpoints
	  with the default joinpoint being the message handler

	* how will you specify things like adding a widget to the current frame?  Who will add the widget
	  to the frame, how does it know to do that, and how will it have access to that?
	* where should the xml parser go?  in the frontend or the core?

	* you could have special variable tables like irc.on_msg where you add variables that are commands
	  and when a message comes in, it traverses all the variables in the table and evaluates them with
	  a particular formulation of parameters.  So you'd "/alias irc.on_msg.respond irc.say hey man"
	  to have it send "hey man" whenever you get a message.

	* should we disallow widgets to have the same id?  should we allow multiple ids and always add a
	  unique numbered id?  (this could cause a problem with the widget remove which at the moment uses
	  the id to find the widget).

	* the context is ignored in select/next/previous/etc but should it be? Should the behave like
	  the CURRENT_WIDGET command in region.c?  Change all the widget and fe.c functions
	* region rejects widgets being added before we've resized it but that is causing some troubles with
	  initialization (you have to make region a non-zero size before adding widget).  Should region
	  instead allow widgets to be added when they don't fit or should you just size region before the
	  terminal resizes it properly?

	* make bind key do the variable lookup itself but if you do, should you allow a path index lookup
	  or force all lookups to be absolute.  If you do that, you can still do path lookups by having
	  the /bind command use path.<name> for the command name (at least if no . is found).

	* work on API documentation
	* finish/fix up region particularily the handling of MODIFY_SIZE and possibly re-write split
	* finish the fe_resize implementation in fe.c
	* add something to the hash/linear/etc lists that allowing you to find multiple entires with the
	  same "key"

	* you could make the list a void * and type pair which means it can be tied to the variable tree but
	  it doesn't have to be.  The list widget would then want to do a traverse and stringify for each entry
	  which hopefully would do what is wanted.  Or should there be perhaps a more advanced list widget
	  that can collect bits of information into entries (ie. for an irc list of nicks in a channel, it
	  gets the list.name entry for the name and the list.is_op entry to decide if it should display a gold
	  star icon next to the entry) (either way it is an entirely frontend based system that uses a
	  list in the variable system with only the possibly of an unattached list needing direct input from
	  outside of the frontend).
 	* should a WCC_SET_SURFACE also cause a resize of everything in region?  at least if it is the root
	  or is it the job of the code that sets the surface to also do a resize?

Structural Issues:
	* should windows be able to have 2 or more names ("#philosophy", "1", "otherside/#philosophy") or
	  should it be able to have only one name and a number which can be easily changed so that windows
	  can be accessed by number and the order can be switched. (or both?)  Could we have all the names
	  in one string like "otherside/#philosophy,#philosophy".  It probably is possible to do this using
	  multiple entries for the same node in the table and using strstr or something to compare the names
	  after the hash number has been found.
	* where should errors generally be printed from even using joinpoints?  Is it ok to have the net
	  code printing errors (in the case of the retries there isn't *that* much choice but perhaps there
	  is).  Would it be better for the command that attempts to connect to report the failure to connect
	  or should net_connect do that before it returns NULL?  (For example, the net.c's failed to connect
	  message is always printed before the unable to reconnect message when stutter is disconnected from
	  irc.)

	* you need to re-evaluate the whole config system.  The biggest fuckup is with things that take
	  multiple options like lists of commands and joinpoints and such.  A perl script of some sort might
	  be useful for configuring these.  (as well as for enabling/disabling features)

	* can anything be done about the sorta messiness of the joinpoints?
	* should joinpoint's default settings be defined inside the appropriate source file using an #ifndef
	  check?  If this was the case, every file would have to have its own joinpoint for something and
	  a global default value would still have to be around that the default values refer to
	* should you make bind_key take a command and args pair instead of a void *, type * and args pair
	  so that you wont have an issue with variables bound to keys being removed
	* should all instances of stringify that are accessable to the user do an index (path lookup) so
	  that all variables can be accessed indirectly and not just commands? (eg /get current_nick will
	  stringify "irc.current_nick")
	* can we use macros to implement the ability to set at compile time which parameters are compiled
	  in and which are modifiable variables?  how will we handle this for all the things in config.h
	* should the stringify and evaluate type functions take a parameter (string or number?) to specify
	  the "type" of operation?  This for example, would let you get the real value and formatted value
	  of a format type.  For stringify it could be a string that specifies the format.  It could be
	  used by things like the nicks list for a channel where colour formatting can be added to the string
	  or you can choose to have the @ and + added as well
	* how do we handle the case where a pointer is stored with a callback and then the callback is
	  destroyed?  The pointer must also be destroyed at that point.  Even if it is stored in a list
	  it will never be needed again so even if we can access it, we have no way to know that we can
	  get rid of it.  This also applies to a second parameter supply to bind_key.  How will we destroy
	  it when a key binding is lost?  (Can typed values be used here?) (a function in signals to delete
	  all signal handlers with a reference to a particular pointer?  will this possibly delete things
	  that its not suppose to since the pointer is not necessarily an address?).  Another possibility is
	  sending an optional destroy function that can is called when a type is destroyed.  For things
	  where the pointer may be used multiple times but still needs to be destroyed, a simple refcount
	  can be used in the pointer and the destroy func.
	* should you make a seperate include/ dir for each module/frontend?
	* should you add parameter names to all function prototypes?  The difference is just readability vs
	  naming conflicts (macros mostly).
	* should we make net and exec be able to have a different callback for each different condition?
	  (read/write/error/etc).

	* should there be 2 region widgets (one handling horizontal and one vertical organization) or should
	  there be one that handles both directions (but not necessarily at the same time)?
	* should we change fe_read to return an int instead of char *?
	* should you add a bunch of variables to the frontends which return common environment variables
	  and values such as the homedir and the current user's username?  should there also be a way to
	  access environment variables through a function and how would that be supported?
	* should the parameters to fe_resize be absolute sizes or differences in size?
	* what will happen to MODIFY_POSITION?  I can't see this being needed much but i guess it could be
	  so we could do the same thing as with MODIFY_SIZE
	* should there be a function in the fe that returns the id of a widget given a pointer to it?  Should
	  there be a way to change the id?  properties (such as title)?
	* how will multiple terminals work in curses?  how will input work with multiple terminal?
	* how can you control a list widget such as a users list where names are added and deleted?  It could
	  be an variable (either assigned as a name that is looked up or as just a value and type (which means
	  it doesn't have to acutally be added to the variable list)) and then the traverse function is used
	  to get each item in the list and stringify is done on it.
	* should widget types be stored in a dedicated list or as a system variable or even at all?  Should
	  there only be the layout types and have widgets add their type to that?
	* how will you deal with adding a new widget?  There should be a way to specify (perhaps in the layout
	  if possible) where the new widget should be put (such as in a particularily named frame).  Then the
	  content portion does not need to know where the widget goes.

	* should irc_send_msg dispatch the message (and thus dispatch all outbound messages? instead of just
	  dispatching select messages like privmsg and notice (which would require a rewrite of the message
	  handlers to check for an outbound message))

	* can/should we make complex and/or expensive operations compile-time options (at least as long
	  as the operation can be disabled without causing trouble)? (like vim does with its FEAT_...)
	* should you move the commmon/utils headers to the include/ dir?
	* /msg transistor hey caused a segfault on turkey
	* a msg to who I think was transistor from work to home didn't show up

Bugs:
	* there is a bug such that if you try to say something in the status window, the server says no such
	  nick
	* the windows version sometimes hangs up when printing the motd and wont change the display but you
	  can still type and the statusbar updates.
	* when a character that is displayed with 2 characters is entered (such as ^C) the cursor is only
	  moved one character forward so when you enter more characters, they show up in further to the left
	  than expected
	* got some kind of infinite loop connected to freenode, in #logarithm, after testing logarithm with
	  stutter running on panther

	* stutter may be printing quit messages for users to channels where the user only partially matches
	  (logarithm_'s quit was reported when only logarithm was in the channel).
	* the Error Disconnected message is only printed for one server and is printed along with other
	  messages to the current window and not to windows properly associated with that server
	* is kick message handling working properly (it seems like stutter printed that logarithm quit in
	  #philosophy after he had been kicked and then quit).
	* in irc_private_msg and irc_notice (at least) there is a bug such that if the text was blank
	  ("/msg person") then it uses the constant "" and but the function tries to change it which causes
	  a segfault so change server.c or msg.c (which might be better).

General:
	* work on the new build system
	* add an X11 frontend
	* make a jabber module?

	* convert some of the modules that use linear lists to use the static inlines version of it instead
	* fix text.c to properly display tab characters (perhaps you could modify irc_format_msg instead
	  to expand tabs and/or to filter out non-printable characters such as backspace and other control
	  codes)

	* add scrollwheel message handlers to the win32 frontend and use joinpoints to define the behaviour
	* fix up colour handling in curses/terminal.c (the add colour pair stuff)
	* change the comment block format at the top of each source file and modify things so that the help
	  information is embedded (such as the command help).

	* add a way to disable the nicktable feature
	* add a version string
	* implement execute.c for win32
	* add a function fe_prompt(char *prompt, char *buffer, int max) that prompts the user for input
	  by some appropriate frontend method (to be used for example to prompt yes or no when quitting)
	* add a flag option to the quit command that causes it to prompt yes/no before quitting
	* convert text.c and server.c/msg.c to use the new queue functions if it is easily possible
	* make everything unicode/UTF-8 capable
	* fix fonts in win32 fe (particularily adding the expression of the bold attribute)

	* should irc_server_disconnect send the quit message (the quit message being passed to the function?)
	* add server name to notice messages
	* report when a command fails
	* make the disconnect error print to all windows instead of just the current one (using joinpoints)
	* make an email checker timed event
	* add irc variables and types for servers and channels and so on in a similar fashion to the colour
	  type in the frontend

	* do better parsing of args in commands and such (so you can use "" in particular)
	* add dcc support
	* have an "activity" status indicator in the status bar so you know when stuff has been said and
	  in what channels
	* have keybindings for targeting specific windows (does this require window numbers?)
	* get realname, nick from current user's info (on unix) (store in a "realname" variable?)
	* pass realname to server when connecting (base it on a "realname" variable?)
	* add list command
	* add home/end functions to be keybound
	* add functions for insert_char, delete_char, move cursor, scroll history, etc (command variables)
	* add unalias command
	* add a beep (maybe using an fe_beep() function which is called from irc_format_msg)?
	* add channel and user mode bit stringification (probably through some kind of variable type)

	* add UDP support to the net interface.
	* for each command write a proper description of the command's use in the source file itself either
	  as a comment or as a variable of some kind that is accessable to some kind of help system.
	* make ping do milliseconds
	* make a directory of configs for runtime configuration files
	* do better parsing of arguments in execute.c
	* make a configuration/compilation script that builds the makefiles
	* modify channel.c to use a hash table instead of the linear list?
	* distinguish between server and irc network? (a network is an "irc_server" with a list of server
	  addresses)
	* add a function to key.c to get the current binding of a key sequence (without processing)
	* can you make the frontend colour type common colour names system a little nicer and fuller?
	* add a prompt to the input widget that you can set through the variable system
	* make all the colour mappings reassignable
	* make an online help system

	* can we fix the handling of the no remove flag in variables so that is doesn't remove the node
	  from the list before checking the flag and readding it when it finds it's not suppose to remove it?
	* optimize for space and speed (re-evaluate things).
	* add the slab allocator
	* catch the ^C signal to cancel a connect
	* add a SIGWINCH handler to curses terminal

Features:
	* logging plugin
	* winamp control and display plugin
	* ability to reorder windows
	* skins for frontends

	* scripting support (possible scripts/applets could be random picture displayer, system monitor,
	  RSS, etc) (google desktop)


