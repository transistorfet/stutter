
Structural Issues:
	* the current/select functions can use the context as a partial type name lookup such that there
	  are special context names which correspond to special object "superclasses" such as 'frame' and
	  'input'.  Then when you specify something like 'frame' as the context, it means a general type of
	  widget.  ???
	* is there a better name for scroll.c?

---------------

	* how will you do timers?  they have to be implemented through the frontend.  Should a timeout
	  cause a signal to be emitted?  a callback (stored in the timer struct) to be called?  Could make
	  an 'events' system.
	* can we use macros to implement the ability to set at compile time which parameters are compiled
	  in and which are modifiable variables?  how will we handle this for all the things in config.h
	* how do we handle the case where a pointer is stored with a callback and then the callback is
	  destroyed?  The pointer must also be destroyed at that point.  Even if it is stored in a list
	  it will never be needed again so even if we can access it, we have no way to know that we can
	  get rid of it.  This also applies to a second parameter supply to bind_key.  How will we destroy
	  it when a key binding is lost?  (Can typed values be used here?) (a function in signals to delete
	  all signal handlers with a reference to a particular pointer?  will this possibly delete things
	  that its not suppose to since the pointer is not necessarily an address?) another possability is
	  to have a event/message/something signal handler for that pointer.
	* standardize the interpretation of the create type function parameters (the format string should
	  only ever contain a description of the arguments and should never be an argument itself)
	* should the stringify and evaluate type functions take a parameter (string or number?) to specify
	  the "type" of operation?  This for example, would let you get the real value and formatted value
	  of a format type or to specify the context of evaluation to avoid the /parse issue. 

	* how can you specify to a scroll widget which parser to use to parse the attributes out of strings
	  printed to that widget.
	* should we change fe_read to return an int instead of char *?
	* how will you draw the cursor? draw it yourself using a reverse colour attribute in the widget
	  refresh itself (thus it would be cross platform)?
	* should colour schemes be largely frontend dependant?  we still need a way to specify colours.
	  one way could be to have variables in the frontend for various event/properties (standardized
	  across all frontends) with the value as a frontend-specific value which the frontend can recognize
	  and then strings printed to the frontend can use the variables (eg. "${fe.error}ERROR: ...${fe.fg}")
	* use the type system for widget types.  A widget is created from a type and subwidgets are added
	* how will widgets (like statusbar) be added, stored, accessed?  Will it be entirely frontend
	  specific or will it be through the variable system in which case a widget would be a variable
	  of the "widget" type.
	* should you add a bunch of variables to the frontends which return common environment variables
	  and values such as the homedir and the current user's username?  should there also be a way to
	  access environment variables through a function and how would that be supported?

	* what if you store the channel struct pointer as the index?  there can be an irc-specific
	  method of finding the channel by assuming the index of an "irc-print" signal (or whatever it
	  will be called) is a channel struct but it would still need a method of searching all signal
	  handlers for "irc-print" for the current window pointer stored as the signal handler's
	  parameter.
	* should irc_send_msg dispatch the message (and thus dispatch all outbound messages? instead of just
	  dispatching select messages like privmsg and notice (which would require a rewrite of the message
	  handlers to check for an outbound message))

	* should the libs/ be moved to the root dir (since the primary issue was all the headers but now
	  that they are all inside include/stutter/ they wont conflict with system headers).
	* can we fix the /parse issue by making it take the string as a param instead and have a signal
	  handler that is called when the key is pressed that acutally get the input and calls parse?
	* a window handler connecting to a signal emitted for a particular window so that it can
	  free memory when that window is destroyed for example (server registering for its status
	  window and if a command like /close causes that window to be destroyed, the server disconnects
	  and frees all resources it uses)
	* can the config.h file be broken up somehow so that each module has it's own configs or is that
	  just generally a bad idea?

Bugs:
	* when you connect and get a nick collision, it should either prompt you or change your nick auto
	  magically
	* if you change your nick while someone is connected to the same network with that nick then it
	  will change the nick (on the statusbar and thus in the server struct) and it isn't changed back
	  when the error message is received from the server
	* fix parse so that /parse something command doesn't cause a segfault
	* there is a bug such that if you try to say something in the status window, the server says no such
	  nick
	* the windows version sometimes hangs up when printing the motd and wont change the display but you
	  can still type and the statusbar updates.
	* the bold_test string only displays white in bold even though the other colours can be bolded
	* when a character that is displayed with 2 characters is entered (such as ^C) the cursor is only
	  moved one character forward so when you enter more characters, they show up in further to the left
	  than expected

General:
	* review use of signals and error printing
	* revise dispatch to handle messages better during a reconnect
	* add ping timeout code to reconnect if the connection is idle (if it isn't already added)
	* fix format so that it recognizes a closing ^C and restores the original colours

	* we can use fe_resize to resize the root widget for a surface thus taking care of the resize issue.
	  Where would the resize take place?  During refresh?  
	* fix up colour handling in curses/terminal.c (the add colour pair stuff)

-----------

	* MAKE SURE all message handlers don't clobber the message!
	* make an unknown ctcp message handler
	* add print handlers for the irc.error and base.error signals
	* implement execute.c for win32
	* make an include for the common frontend commands, utils, etc like the module includes
	* test that if you disconnect, sending a message will cause a reconnect

	* report when a command fails
	* add something (a signal emitted by net perhaps) so that net can print messages, particularily a
	  "Failed to connect, Retrying" message
	* modify net.c to print a message when the connection times out and it retries.
	* fix up error handling in net.c and server.c
	* make the mode msg handler update the channel and user mode bits
	* look into the slow time it takes for the program to quit

	* have an "activity" status indicator in the status bar so you know when stuff has been said and
	  in what channels
	* have keybindings for targeting specific windows (does this require window numbers?)
	* get realname, nick from current user's info (on unix) (store in a "realname" variable?)
	* pass realname to server when connecting (base it on a "realname" variable?)
	* add list command
	* add whowas command
	* add kick command
	* add channel and user mode bits
	* add error message handling
	* add home/end functions to be keybound
	* add functions for insert_char, delete_char, move cursor, scroll history, etc (command variables)
	* add a query feature so that you can talk to other users with your own window
	* add unalias command

	* generalize the evaluate code in parse.c, source.c, key.c, and evaluate.c
	* do better parsing of arguments in execute.c
	* make common/format.c more general in the format that it parses (specifiable parser function?)
	* move include files into an include/ directory inside of each module's directory (and then same
	  for frontends)
	* make a configuration/compilation script that builds the makefiles
	* modify channel.c to use a hash table instead of the linear list?
	* rewrite msg.c using va_args instead of making an array and use sprintf
	* distinguish between server and irc network? (a network is an "irc_server" with a list of server
	  addresses)
	* add a function to key.c to get the current binding of a key sequence (without processing)
	* do something with base/init.c and the loading of types

	* unify the naming patterns for variables and frontend widgets, etc.
	* can we fix the handling of the no remove flag in variables so that is doesn't remove the node
	  from the list before checking the flag and readding it when it finds it's not suppose to remove it?
	* would it be desirable to have msgs/names.c instead of ignoring users already added, update their
	  stats?  would this erase other bitflags that may have been set if they were just overwritten?
	* optimize for space and speed (re-evaluate things).
	* add the slab allocator
	* catch the ^C signal to cancel a connect
	* rewrite the simple frontend?

Features:
	* logging plugin
	* winamp control and display plugin
	* add dcc support
	* ability to reorder windows
	* skins for frontends

	* scripting support (possible scripts/applets could be random picture displayer, system monitor,
	  RSS, etc) (google desktop)


