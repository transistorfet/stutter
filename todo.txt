
	* replace all calls to irc_current_*
	* uncomment and test code in server to break long lines into multiple msgs (used to cause segfault)
	* add reference counting
	* make seperate signals for seperate kinds of data for the irc module (irc server msgs in particular)
	* convert macros to the all caps scheme!
	* fill in TODOs

	* how will you discover the current server and channel based on information that can be obtained
	  from the frontend through the variable system.  Possibly some information could be stored in the
	  current window, accessable as "fe.current.name" for example.

	* send the signal_s during the output.create signal emit as a parameter
	* make a more unique name when emitting output.create rather than just the channel name (url perhaps?)
	* remove/disable the find_widget code in the create signal handler since our names are not yet unique
	  and we don't use that signal to "show_widget"s anyways
	* window activity will be held using the old status-style variable type with a stringifying function
	  that checks all windows in the frame for a "NEEDS_REFRESH" bit and returns a string describing
	  which windows need refreshing
	* it must be possible to find out the module name of the current (target) window so that a command
	  can be looked up first in that module's commands.  When you execute a command infront of an irc
	  window, you want it to be treated as an irc command, without having to specify that at all.
	  Possibly, this functionality could be implemented as a special variable and added to the "path" list.

	* make it so that a channel/signal is capable of being connected to a widget such that the channel
	  can send OSC messages to the widget and possibly get replies to queries.  This would be used to
	  solve the context problem (what the current irc server is).  This would also make it possible
	  to make complex frontend objects and controls and such.  You could easily have a list widget that
	  is controlled through OSC messages from a backend list controller.
	* make sure to thuroughly prototype this OSC idea so that you know exactly how it *should* work and
	  be implemented before you actually kill the current code (not even branching, just do the code clean
	  and fresh like as the C implementation of OCK.

    Variables:

	* implement the check of bitflags in variable_table_add for the method to add (create, add object)
	* should evaluate and stringifiy be made recursive like the others?
	* change index_variable() to something else that isn't confusing (conflicts with the index virtfunc)
	* we could make the current variable types more like independant objects, possibly even putting them
	  all in the core/ directory rather than the types/ directory.  Right now, all objects that inherit
	  from the variable_s class will implement the variable type functions internally as it should be.
	  All variables would then be created like objects.  When you have a direct pointer to a value that
	  is not itself an object (like a string or number) but want it accessable as a variable, you can
	  create a variable object that takes a pointer to it and manages it like a variable (a generic
	  reference type object).  The thing not handled here is the situation where you only need an object
	  temporarily or something (where you want to make a value accessible but that value is in a struct
	  that is itself added to the variable system (eg. attributes)).

    Signals:

	* implement/use the signal type field to make it easy to identify certain signals
	* perhaps instead of the signals system as it is, each "signal" could be a channel/data source which
	  a callback can be registered for like currently and instead of receiving whatever it receives now,
	  it can receive "events" (doesn't necessarily have to be an allocated object).  An event could be
	  a create event, a print/output event, or a "show/target" event (this is the reason we are
	  conisdering this, so that you can send a signal to make a channel current).  (I don't like using
	  this for show_widget already but I like the idea otherwise (just a seperation of a signal and
	  what is sent to that signal)).
	* you can have special signals like "purge" or something that you can be sent to any handler which
	  will recognize it as the signal handler being destroyed and therefore must release any resources
	* make/rename signals to events (a signal would be a channel or something with event listeners
	  registering for callbacks and events would be sent to channels are received by event listeners).
	* make commands at least optionally tied into the signals/event system so that a signal/event can
	  be sent which causes a command to execute (or tie the signal system into the variable system)
	* generally make the whole system revolvable around systems that can be easily translated to an
	  OSC-like protocol so that it's as if everything happens by OSC-like msgs and anything can easily
	  tie into that system either directly or through a socket
	* you need a way of basically sending an OSC message when a variable changes, particularily the
	  statusbar variable, whether this is done using signals or some more specialized way.  At the very
	  least you can register for a timer to tell you to re-read the variable
	* should you/could you have some general/generic timers that emit signals, a couple common timings
	  like 10s, 1min, 5min?
	* implement the calling of the parent of a signal (pass signal to parent, or to children, etc)

    TODO:

	* fix frontend variable types for colour handling
	* change names in frontend format.c (and refactor? should we use a different format like xml?)
	* convert all error reporting in tcp.c to emit signals
	* move the fe_net_receive_text function to tcp.c
	* eliminate the callback struct in globals.h
	* finish converting base types timer and string-ref (unless you can merge it into string)

	* make sure that reconnects don't cause a change of the current window and don't fill a channel
	  with funny messages from the other server such as notices and stuff
	* fix/reimplement the tab complete functionality in IRC (it currently accesses the input buffer which
	  is not really possibly anymore)  Perhaps the buffer can be accessible and modifiable as a variable
	  in the variable system

	* should va_list functions use _real or _va as the mangle
	* move the key macros from init.h into something frontend-specific like frontend/common/init.h
	* replace while loops with for loops where possible
	* should the common frontend *not* have it's own init since not all features might be usable with
	  a given frontend?
	* should you move the quit command to the common frontend?
	* should you replace type lookups such as in alias.c to directly referencing the type struct pointer?
	* fix up config system
	* fix config defines for common error messages like VARIABLE_NOT_FOUND (it's BASE specific atm)

	* add an is_a() check of the type in variable before trying to initialize or create a variable
	* seriously fix up string.c or even better get rid of it 
	* should base.exec command be moved into the frontend?
	* should you change the name mangle from _s to something else for structs?

	* make timers more secure through the object system by making them objects themselves or making them
	  part of the objects they control (same with signals/hooks if we keep them around?)
	* there is still a bug in timer or something, after a reconnect, the value of cur (line 141) was
	  invalid, i assume from the timer being destroyed at some point.
	* fix certain commands such as bind and perhaps context and many others to check for proper
	  parameters instead of attempting to evaluate the command anyways
	* make sure non-fatal errors don't cause things to completely not work.  For example if the wildcard
	  thing isn't available, then don't prevent a normal lookup (i think that one is fixed already)
	* attempt to reduce the number of crazy (stupid) widget control functions
	* what will happen to MODIFY_POSITION?  I can't see this being needed much but i guess it could be
	  so we could do the same thing as with MODIFY_SIZE

	* we can't do attrib/style/colour the way we were doing it using the new object system where we
	  pass the subparts of attrib to the appropriate type handler because those subparts aren't vars
	* params should be through a very simple single char per param string with "sfopn" string, function,
	  object, pointer, number (should you have a different one for float vs int)?

	* how do you destroy a window/channel?  An IRC channel can be "disconnected" either by using the
	  leave/part command or by closing the window so either the irc module or the frontend must be able
	  to somehow destroy the whole thing (the channel struct and the window).  Currently, the
	  output.destroy signal is emitted when a channel is destroyed which causes the window to be closed
	  but there is no method yet of closing the window and having the channel destroyed.  Perhaps the
	  same signal can be used and emitted by the window.
	* should you be able to directly access the interface object functions instead of using intermediate
	  functions?

	* convert as many compile-time options to using simple defines instead of complex config mechanisms
	* add as many simple compile-time options as possible (ie. ENABLE_NICKCOLOURS, etc)
	* add a mechanism so that objects (pointers stored in callbacks (command, keybinding, etc)) can be
	  freed without conflict.  A possability is doing refcounting builtin to object.c.  You may also need
	  to use a bitflag if non-object pointers are to be accepted.

	* make it so that you can use stutter as a platform for writing command line utilies/servers so that
	  if you compile stutter a certain way, you can make a simple network server using a few config
	  options such as one to control a media player through exec and it's command line utilities. (ie.
	  sits on the network as a server and exec's commands as requests come in).  This idea is identical
	  to the idea of an OSC routing node ala the plc project.


    Environments:

	* OK, we are going to handle "context" by using the variable system one way or another.  Most likely,
	  eventually, we will have an environment subclass of variable_table which act like lisp environments.
	  Each "connection" would have it's own environment.  Managing which environment is current is
	  done somehow in the frontend or where ever connections are managed.  This may be accessed as a
	  global variable or passed to each appropriate function call as another arg but either way will be
	  implemented later.  For now, it will be assumed that there will be only one global table, one
	  frontend, one "connection", possible accessed through an "env" subspace or maybe just "fe".
	* "context" must be accessable to commands, signal handlers, timer handlers, etc.  It could possibly
	  be stored with each socket such that each socket (whether an OSC socket or not) could have it's
	  own "context", including the keyboard/stdin socket.  If passed as an argument, it would be passed
	  to all functions starting with the socket read/write callback.
	* use environments like variable scope

	* have some kind of OSC structure thingy that manages an OSC connection and has the socket and
	  "context" thingy to it.
	* try to make the OSC stuff an indpendant module not directly linked to the frontend (it might be
	  possible).

Structural Issues:

	* make it so that you can somehow send signals through an OSC-like protocol such that another program
	  can be the frontend for stutter such as having a python/perl script for each window
	* can you add special comments that a perl script can use to create at least part of the defaults.cfg
	  file?  Is this even a good idea?
	* you could have special variable tables like irc.on_msg where you add variables that are commands
	  and when a message comes in, it traverses all the variables in the table and evaluates them with
	  a particular formulation of parameters.  So you'd "/alias irc.on_msg.respond irc.say hey man"
	  to have it send "hey man" whenever you get a message.
	* where should the xml parser go?  in the frontend or the core?

    Core:

	* is there a way to have multiple layers of key contexts so for example, a global context and then
	  an irc context an irc:userlist context (for doing stuff inside of a userlist widget)? Could this
	  even be implemented without a structural change, just using context names with funny characters?
	  (If a key is not found in userlist:irc then it checks irc and then global).
	* should all instances of stringify that are accessable to the user do an index (path lookup) so
	  that all variables can be accessed indirectly and not just commands? (eg /get current_nick will
	  stringify "irc.current_nick")
	* should the stringify and evaluate type functions take a parameter (string or number?) to specify
	  the "type" of operation?  This for example, would let you get the real value and formatted value
	  of a format type.  For stringify it could be a string that specifies the format.  It could be
	  used by things like the nicks list for a channel where colour formatting can be added to the string
	  or you can choose to have the @ and + added as well
	* should we make interfaces be able to have a different callback for each different condition?
	  (read/write/error/etc).
	* should signals be able to have multipled args passed to emit (using a va_list emit function)

    IRC Module:

	* should irc_send_msg dispatch the message (and thus dispatch all outbound messages? instead of just
	  dispatching select messages like privmsg and notice (which would require a rewrite of the message
	  handlers to check for an outbound message))

    Frontend:

	* can you make a special frontend/module pair such that the stutter core can be a daemon process and
	  you connect through a socket/dbus/something with a frontend version.  You then can use the frontend
	  locally or remotely to control the core where all the functionality is.
	* make a list widget that can display stuff like a list of users in a channel.  How will it get the
	  data?  It could use inheritence from a generic list object type or something perhaps.
	* how will multiple terminals work in curses?  how will input work with multiple terminal?

	* should there be 2 region widgets (one handling horizontal and one vertical organization) or should
	  there be one that handles both directions (but not necessarily at the same time)?
	* should you add a bunch of variables to the frontends which return common environment variables
	  and values such as the homedir and the current user's username?  should there also be a way to
	  access environment variables through a function and how would that be supported?

	* how will you deal with adding a new widget?  There should be a way to specify (perhaps in the layout
	  if possible) where the new widget should be put (such as in a particularily named frame).  Then the
	  content portion does not need to know where the widget goes.  It could perhaps be a property in the
	  root widget's definition or perhaps a "special" layout type that instead of generating a widget,
	  creates a widget defined as a child and then adds it via the method specified in its properties
	* should we disallow widgets to have the same id?  should we allow multiple ids and always add a
	  unique numbered id?  (this could cause a problem with the widget remove which at the moment uses
	  the id to find the widget).
	* how will you specify things like adding a widget to the current frame?  Who will add the widget
	  to the frame, how does it know to do that, and how will it have access to that?  Perhaps it can be
	  in the properties for the widget
	* perhaps you can add a sorta WCC_SET_INVISIBLE/WCC_SET_VISIBLE and have them set bitflags so that
	  it is easy to know if a widget is visible or not (and then you can do scrollbar things as well)

 	* should a WCC_SET_SURFACE also cause a resize of everything in region?  at least if it is the root
	  or is it the job of the code that sets the surface to also do a resize?
	* how is the win32 config defs going to work?

Bugs:

	* there is a bug such that if you quit using the keybinding (^C^X) then it prints (null) as the
	  quit message instead of printing the default quit message

	* there is a bug such that a CTCP action message coming from freenode caused a NULL string to be
	  passed from irc_format_msg to irc_format_parse_text.  The NULL string was part of the CTCP struct
	  in the irc_msg struct.  The CTCP in queostion appears to have been \x01ACTION \0x1.  This appears
	  to be a parsing issue in msg.c

	* there is a bug such that if you try to say something in the status window, the server says no such
	  nick
	* when a character that is displayed with 2 characters is entered (such as ^C) the cursor is only
	  moved one character forward so when you enter more characters, they show up in further to the left
	  than expected
	* got some kind of infinite loop connected to freenode, in #logarithm, after testing logarithm with
	  stutter running on panther

	* stutter may be printing quit messages for users to channels where the user only partially matches
	  (logarithm_'s quit was reported when only logarithm was in the channel).
	* the Error Disconnected message is only printed for one server and is printed along with other
	  messages to the current window and not to windows properly associated with that server
	* is kick message handling working properly (it seems like stutter printed that logarithm quit in
	  #philosophy after he had been kicked and then quit).
	* in irc_private_msg and irc_notice (at least) there is a bug such that if the text is blank
	  ("/msg person") then it uses the constant "" and but the function tries to change it which causes
	  a segfault.

	* Overnight (2007-04-01 ~01:19) there was a segfault on turkey while reconnecting after a timeout.
	  Connected to otherside and freenode, in #philosophy, #coffeelounge, and #osdev with #philosophy
	  as the current channel.  The reconnect worked but a few seconds after rejoining the channel the
	  segfault occurred.
	* Segfault in text_print after allocating the node's memory, the node address appears to be non-zero
	  yet invalid (viewed in a coredump.  i have no idea why this would have happened)
	* segfaulty thing when there was a netsplit and we were doing an autoreconnect there was a segfault
	  at the actual call to shutdown() on the socket most likely because we forget to set server->net
	  to NULL at one point.

    Frontend:

	* the windows version sometimes hangs up when printing the motd and wont change the display but you
	  can still type and the statusbar updates.

General:

	* in types/command.c, evaluate function always returns -1 but i don't know why.  Is it a hack?
	* get doxygen working

    Refactoring:


    Config System:

	* can you make it possible to refer to #define values in values (variables) defined in the config
	* add the irc.version variable
	* add the ability to have duplicate "add" things (for handlers) (you need a way to pervent duplicate
	  entries where for example an option in enabled twice)
	* add type checking to the config script things (make sure values are a string with "" or a number
	  without and possibly automatically add semicolons to joinpoints)
	* add a simple makefile/.mk file output from the config script (since the config file has module and
	  frontend statements and therefore knows what to attempt to compile)
	* write a scripty thing to compile a list of all the default settings in the config scripts and write
	  them into a file as comments (a file that the user will edit) so that they know what options are
	  available
	* add a way to define widget layouts.  This might be a different system that uses XML

    IRC Module:

	* clean up irc server, especially try to combine the destruction of the server struct into a single
	  function (right now there is 2 destroys, one in release and one in destroy)

	* fix the version response (probably due to a missing irc.version variable)
	* make an irc key context
	* add channel and user mode bit stringification (probably through some kind of variable type)
	* add server name to notice messages
	* add traverse functions to the channel and user list types.
	* modify the irc types to return list types if referenced with direct names instead of returning NULL

	* make ping do milliseconds
	* modify channel.c to use a hash table instead of the linear list for storing users
	* distinguish between server and irc network? (a network is an "irc_server" with a list of server
	  addresses)

	* convert text.c and server.c/msg.c to use the new queue functions if it is easily possible
	* should irc_server_disconnect send the quit message (the quit message being passed to the function?)
	* get realname, nick from current user's info (on unix) (store in a "realname" variable?)
	* add an irc list command
	* pass realname to server when connecting (base it on a "realname" variable?)
	* add dcc support
	* add an active IRC ping thing

    Frontend:

	* modify fe.insert to allow escapes to insert unusual characters
	* fix text.c to properly display tab characters (perhaps you could modify irc_format_msg instead
	  to expand tabs and/or to filter out non-printable characters such as backspace and other control
	  codes)
	* add functions for insert_char, delete_char, move cursor, scroll history, etc (command variables)
	* add a beep (maybe using an fe_beep() function which is called from irc_format_msg)?
	* can you make the frontend colour type common colour names system a little nicer and fuller?
	* add a prompt to the input widget (that you can set through the variable system?)
	* make all the colour mappings reassignable
	* add UDP support to the net interface.
	* can you make a method of specifying windows (in order to select them) through numbers such that it
	  is possible to have key bindings for ALT-# keys to switch windows?
	* convert the terminal def_attrib variable to an attrib:fe type so you can set the style

	* have an "activity" status indicator in the status bar so you know when stuff has been said and
	  in what channels
	* add a function fe_prompt(char *prompt, char *buffer, int max) that prompts the user for input
	  by some appropriate frontend method (to be used for example to prompt yes or no when quitting)
	* finish/fix up region particularily the handling of MODIFY_SIZE and possibly re-write split
	* finish the fe_resize implementation in fe.c

	* fix up colour handling in curses/terminal.c (the add colour pair stuff)

	* add SCC_SET_FOCUS handler to win32 terminal
	* fix fonts in win32 fe (particularily adding the expression of the bold attribute)
	* implement execute.c for win32
	* add scrollwheel message handlers to the win32 frontend and use joinpoints to define the behaviour
	* finish implementing the win32 menu system
	* you can have a command "fe.dialogue <diag-name> <params>" in the win32 frontend that pops up a
	  dialogue by the given name (stored in a list probably by a dialogue.c manager in the core)

    Core:

	* add a way to get the current context name (perhaps through a variable)
	* add a find_next function to hash/linear/queue
	* add a version string
	* add unalias command
	* make a common method of identifying keys to be bound (particularily keys like home/end/etc)
	* do better parsing of arguments in execute.c
	* add a function to key.c to get the current binding of a key sequence (without processing)
	* make the disconnect error print to all windows instead of just the current one (using joinpoints)
	* add a system of returning common error codes from commands and printing generic error messages
	  for those commands common to all commands (such as command failed messages)

	* add a flag option to the quit command that causes it to prompt yes/no before quitting
	* make an online help system
	* can we fix the handling of the no remove flag in variables so that is doesn't remove the node
	  from the list before checking the flag and readding it when it finds it's not suppose to remove it?
	* optimize for space and speed (re-evaluate things).
	* add the slab allocator
	* catch the ^C signal to cancel a connect (make a way to interrupt an operation)
	* add a SIGWINCH handler to curses terminal
	* make an email checker timed event

	* make everything unicode/UTF-8 capable

Features:

	* logging plugin
	* winamp control and display plugin
	* ability to reorder windows
	* skins for frontends
	* jabber (other IM) modules
	* telnet module
	* file manager module/capability
	* shell capabilities

	* X11 frontend
	* jabber module?

	* scripting support (possible scripts/applets could be random picture displayer, system monitor,
	  RSS, etc) (google desktop)

Website:

	* add documentation to the website
	* add screenshots to your own website page
	* maybe make it look a bit more pretty?

