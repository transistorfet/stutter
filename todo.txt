
	* add to timer the ability to expire a timer prematurely
	* re-evaluate the use of the traverse functions for channel and user lists.  Would it be better to
	  have a function or macro to step through the list like you do for the raw list itself?
	* add macros to timer to create a timer and add a signal handler at the same time

	* you *really* have to fix signal system to better manage handlers (when things disconnect or are
	  destroyed for example).  Perhaps all event-based services can use an id (perhaps even just a
	  pointer) to group callbacks tied to a particular object so that the object can be purged from the
	  system cleanly without a need to manually remove them all.  Perhaps you could even use a
	  "purge_object" signal to report when an object/id should be removed.  How would each handler of
	  this signal know that their parameter is a pointer and not a number?
	* would it be totally bad to accept the parameters to emit as a va_list and store them in an array
	  of pointers that is passed to the handlers along with the size of the array?  Would this make
	  things to specific to a particular signal that is handled?  Is that a bad thing?

	* make bind key do the variable lookup itself but if you do, should you allow a path index lookup
	  or force all lookups to be absolute.  If you do that, you can still do path lookups by having
	  the /bind command use path.<name> for the command name (at least if no . is found).

	* should process_key take an unsigned char instead of an int?  do special characters like the
	  arrow keys use numbers >256?  What about international keyboard, is there any reason to use an
	  array of short or int instead of unsigned char as the key sequence?  (It would be wisest to use
	  an array of int.  windows sends UTF-16 chars or for the WM_UNICHAR message, UTF-32).

	* it might be possible to make it so that every server has it's own frame of channel widgets and
	  when you use the next command, it will find the current frame, find the next text widget in that
	  frame, and if there is no next widget, instead of going to the first, it finds the next frame
	  (which should go to the next frame or go to the same frame if there is only one) and then go
	  to the first text widget in that frame.

	* work on API documentation
	* finish/fix up region particularily the handling of MODIFY_SIZE and possibly re-write split

	* you kind of need a widget that is a list of widget/terminal pairs that handles everything itself
	  (taking away some responsibility of fe.c) so that you have a widget that can be an absolute root
	  that is the parent of all seperate windows/terminals.  (A dedicated list in fe.c wouldn't work
	  since the widgets need something to put as their parent unless fe.c was itself a widget).
	* should a WCC_SET_SURFACE also cause a resize of everything in region?  at least if it is the root
	  or is it the job of the code that sets the surface to also do a resize?

Structural Issues:
	* should windows be able to have 2 or more names ("#philosophy", "1", "otherside/#philosophy") or
	  should it be able to have only one name and a number which can be easily changed so that windows
	  can be accessed by number and the order can be switched. (or both?)  Could we have all the names
	  in one string like "otherside/#philosophy,#philosophy".  It probably is possible to do this using
	  multiple entries for the same node in the table and using strstr or something to compare the names
	  after the hash number has been found.
	* where should errors generally be printed from even using joinpoints?  Is it ok to have the net
	  code printing errors (in the case of the retries there isn't *that* much choice but perhaps there
	  is).  Would it be better for the command that attempts to connect to report the failure to connect
	  or should net_connect do that before it returns NULL?  (For example, the net.c's failed to connect
	  message is always printed before the unable to reconnect message when stutter is disconnected from
	  irc.)

	* should all instances of stringify that are accessable to the user do an index (path lookup) so
	  that all variables can be accessed indirectly and not just commands?
	* can we use macros to implement the ability to set at compile time which parameters are compiled
	  in and which are modifiable variables?  how will we handle this for all the things in config.h
	* should the stringify and evaluate type functions take a parameter (string or number?) to specify
	  the "type" of operation?  This for example, would let you get the real value and formatted value
	  of a format type or to specify the context of evaluation to avoid the /parse issue. 
	* should you make bind_key take a command and args pair instead of a void *, type * and args pair
	  so that you wont have an issue with variables bound to keys being removed
	* how do we handle the case where a pointer is stored with a callback and then the callback is
	  destroyed?  The pointer must also be destroyed at that point.  Even if it is stored in a list
	  it will never be needed again so even if we can access it, we have no way to know that we can
	  get rid of it.  This also applies to a second parameter supply to bind_key.  How will we destroy
	  it when a key binding is lost?  (Can typed values be used here?) (a function in signals to delete
	  all signal handlers with a reference to a particular pointer?  will this possibly delete things
	  that its not suppose to since the pointer is not necessarily an address?).  Another possibility is
	  sending an optional destroy function that can is called when a type is destroyed.  For things
	  where the pointer may be used multiple times but still needs to be destroyed, a simple refcount
	  can be used in the pointer and the destroy func.
	* should you make a seperate include/ dir for each module/frontend?

	* should there be 2 region widgets (one handling horizontal and one vertical organization) or should
	  there be one that handles both directions (but not necessarily at the same time)?
	* the init functions for widgets should take parameters but how should those parameters be passed and
	  described? (ie. using vargs? passing a string with typenames or valuename?)
	* should we change fe_read to return an int instead of char *?
	* should you add a bunch of variables to the frontends which return common environment variables
	  and values such as the homedir and the current user's username?  should there also be a way to
	  access environment variables through a function and how would that be supported?
	* should the parameters to fe_resize be absolute sizes or differences in size?
	* what will happen to MODIFY_POSITION?  I can't see this being needed much but i guess it could be
	  so we could do the same thing as with MODIFY_SIZE
	* should there be a function in the fe that returns the id of a widget given a pointer to it?
	* the context is ignored in select/next/previous/etc but should it be? Should the behave like
	  the CURRENT_WIDGET command in region.c?
	* how will multiple terminals work in curses?  how will input work with multiple terminal?
	* how can you control a list widget such as a users list where names are added and deleted?  should
	  the widget rely on an array to get it's information?  should the widget be a vairable array itself?
	  should the whole widget structure be replicated as variables such that every widget is added to
	  the variables list using the id as it's name?
	* should widget types be stored in a dedicated list or as a system variable

	* should irc_send_msg dispatch the message (and thus dispatch all outbound messages? instead of just
	  dispatching select messages like privmsg and notice (which would require a rewrite of the message
	  handlers to check for an outbound message))

	* can/should we make complex and/or expensive operations compile-time options (at least as long
	  as the operation can be disabled without causing trouble)? (like vim does with its FEAT_...)
	* should you move the commmon/utils headers to the include/ dir?
	* a window handler connecting to a signal emitted for a particular window so that it can
	  free memory when that window is destroyed for example (server registering for its status
	  window and if a command like /close causes that window to be destroyed, the server disconnects
	  and frees all resources it uses)

Bugs:
	* there is a bug such that if you try to say something in the status window, the server says no such
	  nick
	* the windows version sometimes hangs up when printing the motd and wont change the display but you
	  can still type and the statusbar updates.
	* when a character that is displayed with 2 characters is entered (such as ^C) the cursor is only
	  moved one character forward so when you enter more characters, they show up in further to the left
	  than expected
	* got some kind of infinite loop connected to freenode, in #logarithm, after testing logarithm with
	  stutter running on panther

	* stutter may be printing quit messages for users to channels where the user only partially matches
	  (logarithm_'s quit was reported when only logarithm was in the channel).
	* the Error Disconnected message is only printed for one server and is printed along with other
	  messages to the current window and not to windows properly associated with that server

General:
	* work on the new build system
	* convert some of the modules that use linear lists to use the static inlines version of it instead
	* fix text.c to properly display tab characters (perhaps you could modify irc_format_msg instead
	  to expand tabs and/or to filter out non-printable characters such as backspace and other control
	  codes)

	* make the fe.c stuff dynamically build the frontend widgets instead of being static like it is
	* add scrollwheel message handlers to the win32 frontend and use joinpoints to define the behaviour
	* fix up colour handling in curses/terminal.c (the add colour pair stuff)

	* implement execute.c for win32
	* add a function fe_prompt(char *prompt, char *buffer, int max) that prompts the user for input
	  by some appropriate frontend method (to be used for example to prompt yes or no when quitting)
	* add a flag option to the quit command that causes it to prompt yes/no before quitting
	* convert text.c and server.c/msg.c to use the new queue functions if it is easily possible

	* report when a command fails
	* make the disconnect error print to all windows instead of just the current one (using joinpoints)
	* add a timer response type and make an email checker timed event
	* add irc variables and types for servers and channels and so on in a similar fashion to the colour
	  type in the frontend

	* do better parsing of args in commands and such (so you can use "" in particular)
	* add dcc support
	* have an "activity" status indicator in the status bar so you know when stuff has been said and
	  in what channels
	* have keybindings for targeting specific windows (does this require window numbers?)
	* get realname, nick from current user's info (on unix) (store in a "realname" variable?)
	* pass realname to server when connecting (base it on a "realname" variable?)
	* add list command
	* add home/end functions to be keybound
	* add functions for insert_char, delete_char, move cursor, scroll history, etc (command variables)
	* add unalias command
	* add a beep (maybe using an fe_beep() function which is called from irc_format_msg)?
	* add channel and user mode bit stringification (probably through some kind of variable type)

	* for each command write a proper description of the command's use in the source file itself either
	  as a comment or as a variable of some kind that is accessable to some kind of help system.
	* make ping to milliseconds
	* make a directory of configs for runtime configuration files
	* do better parsing of arguments in execute.c
	* make a configuration/compilation script that builds the makefiles
	* modify channel.c to use a hash table instead of the linear list?
	* distinguish between server and irc network? (a network is an "irc_server" with a list of server
	  addresses)
	* add a function to key.c to get the current binding of a key sequence (without processing)
	* can you make the frontend colour type common colour names system a little nicer and fuller?
	* add a prompt to the input widget that you can set through the variable system
	* make all the colour mappings reassignable
	* make an online help system

	* can we fix the handling of the no remove flag in variables so that is doesn't remove the node
	  from the list before checking the flag and readding it when it finds it's not suppose to remove it?
	* optimize for space and speed (re-evaluate things).
	* add the slab allocator
	* catch the ^C signal to cancel a connect
	* add a SIGWINCH handler to curses terminal

Features:
	* logging plugin
	* winamp control and display plugin
	* ability to reorder windows
	* skins for frontends

	* scripting support (possible scripts/applets could be random picture displayer, system monitor,
	  RSS, etc) (google desktop)


